//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//   Authors: Many. See MHW Editor Cretits.
// File Mask: *.dtt_epg
//  Category: MHW-Editor
//------------------------------------------------

// Monster Parts
typedef struct {
    uint Magic_1<name="Magic 1 (uint)">;
    uint Magic_2<name="Magic 2 (uint)">;
    uint Monster_Id<name="Monster Id (uint)">;
    uint Magic_3<name="Magic 3 (uint)">;
    uint Health<name="Health (uint)">;
    uint Flinches_Count<name="Flinches Count (uint)">;
} Monster_Parts;

Monster_Parts Monster_Parts_<name="Monster Parts">;

// Flinches
typedef struct {
    uint Flinch_Value<name="Flinch Value (uint)">;
    int Special_Part_1<name="Special Part 1 (int)">;
    int Special_Part_2<name="Special Part 2 (int)">;
    int Special_Part_3<name="Special Part 3 (int)">;
    uint Kinsect_Color<name="Kinsect Color (uint)">;
    uint Parts_Type<name="Parts Type (uint)">;

    // Parts1
    typedef struct {
        int Part_Id_LR_HR1_Normal<name="Part Id LR/HR1 Normal (int)">;
        int Part_Id_LR_HR1_Wounded<name="Part Id LR/HR1 Wounded (int)">;
        int Part_Id_LR_HR1_Special_Phase_1<name="Part Id LR/HR1 Special Phase 1 (int)">;
        int Part_Id_LR_HR1_Special_Phase_2<name="Part Id LR/HR1 Special Phase 2 (int)">;
        int Part_Id_LR_HR1_Special_Phase_3<name="Part Id LR/HR1 Special Phase 3 (int)">;
        int Part_Id_MR1_Normal<name="Part Id MR1 Normal (int)">;
        int Part_Id_MR1_Wounded<name="Part Id MR1 Wounded (int)">;
        int Part_Id_MR1_Special_Phase_1<name="Part Id MR1 Special Phase 1 (int)">;
        int Part_Id_MR1_Special_Phase_2<name="Part Id MR1 Special Phase 2 (int)">;
        int Part_Id_MR1_Special_Phase_3<name="Part Id MR1 Special Phase 3 (int)">;
        uint unk9<name="unk9 (uint)">;
        uint unk10<name="unk10 (uint)">;
        uint unk11<name="unk11 (uint)">;
        ubyte unk12<name="unk12 (ubyte)">;
        ubyte unk13<name="unk13 (ubyte)">;
    } Parts1;

    if (Parts_Type == 1) { Parts1 Parts1_<name="Parts1">; }

    // Parts2
    typedef struct {
        int Part_Id_LR_HR1_Normal<name="Part Id LR/HR1 Normal (int)">;
        int Part_Id_LR_HR1_Wounded<name="Part Id LR/HR1 Wounded (int)">;
        int Part_Id_LR_HR1_Special_Phase_1<name="Part Id LR/HR1 Special Phase 1 (int)">;
        int Part_Id_LR_HR1_Special_Phase_2<name="Part Id LR/HR1 Special Phase 2 (int)">;
        int Part_Id_LR_HR1_Special_Phase_3<name="Part Id LR/HR1 Special Phase 3 (int)">;
        int Part_Id_MR1_Normal<name="Part Id MR1 Normal (int)">;
        int Part_Id_MR1_Wounded<name="Part Id MR1 Wounded (int)">;
        int Part_Id_MR1_Special_Phase_1<name="Part Id MR1 Special Phase 1 (int)">;
        int Part_Id_MR1_Special_Phase_2<name="Part Id MR1 Special Phase 2 (int)">;
        int Part_Id_MR1_Special_Phase_3<name="Part Id MR1 Special Phase 3 (int)">;
        int Part_Id_LR_HR2_Normal<name="Part Id LR/HR2 Normal (int)">;
        int Part_Id_LR_HR2_Wounded<name="Part Id LR/HR2 Wounded (int)">;
        int Part_Id_LR_HR2_Special_Phase_1<name="Part Id LR/HR2 Special Phase 1 (int)">;
        int Part_Id_LR_HR2_Special_Phase_2<name="Part Id LR/HR2 Special Phase 2 (int)">;
        int Part_Id_LR_HR2_Special_Phase_3<name="Part Id LR/HR2 Special Phase 3 (int)">;
        int Part_Id_MR2_Normal<name="Part Id MR2 Normal (int)">;
        int Part_Id_MR2_Wounded<name="Part Id MR2 Wounded (int)">;
        int Part_Id_MR2_Special_Phase_1<name="Part Id MR2 Special Phase 1 (int)">;
        int Part_Id_MR2_Special_Phase_2<name="Part Id MR2 Special Phase 2 (int)">;
        int Part_Id_MR2_Special_Phase_3<name="Part Id MR2 Special Phase 3 (int)">;
        uint unk19<name="unk19 (uint)">;
        uint unk20<name="unk20 (uint)">;
        uint unk21<name="unk21 (uint)">;
        ubyte unk22<name="unk22 (ubyte)">;
        ubyte unk23<name="unk23 (ubyte)">;
    } Parts2;

    if (Parts_Type == 2) { Parts2 Parts2_<name="Parts2">; }

    // Parts3
    typedef struct {
        int Part_Id_LR_HR1_Normal<name="Part Id LR/HR1 Normal (int)">;
        int Part_Id_LR_HR1_Wounded<name="Part Id LR/HR1 Wounded (int)">;
        int Part_Id_LR_HR1_Special_Phase_1<name="Part Id LR/HR1 Special Phase 1 (int)">;
        int Part_Id_LR_HR1_Special_Phase_2<name="Part Id LR/HR1 Special Phase 2 (int)">;
        int Part_Id_LR_HR1_Special_Phase_3<name="Part Id LR/HR1 Special Phase 3 (int)">;
        int Part_Id_MR1_Normal<name="Part Id MR1 Normal (int)">;
        int Part_Id_MR1_Wounded<name="Part Id MR1 Wounded (int)">;
        int Part_Id_MR1_Special_Phase_1<name="Part Id MR1 Special Phase 1 (int)">;
        int Part_Id_MR1_Special_Phase_2<name="Part Id MR1 Special Phase 2 (int)">;
        int Part_Id_MR1_Special_Phase_3<name="Part Id MR1 Special Phase 3 (int)">;
        int Part_Id_LR_HR2_Normal<name="Part Id LR/HR2 Normal (int)">;
        int Part_Id_LR_HR2_Wounded<name="Part Id LR/HR2 Wounded (int)">;
        int Part_Id_LR_HR2_Special_Phase_1<name="Part Id LR/HR2 Special Phase 1 (int)">;
        int Part_Id_LR_HR2_Special_Phase_2<name="Part Id LR/HR2 Special Phase 2 (int)">;
        int Part_Id_LR_HR2_Special_Phase_3<name="Part Id LR/HR2 Special Phase 3 (int)">;
        int Part_Id_MR2_Normal<name="Part Id MR2 Normal (int)">;
        int Part_Id_MR2_Wounded<name="Part Id MR2 Wounded (int)">;
        int Part_Id_MR2_Special_Phase_1<name="Part Id MR2 Special Phase 1 (int)">;
        int Part_Id_MR2_Special_Phase_2<name="Part Id MR2 Special Phase 2 (int)">;
        int Part_Id_MR2_Special_Phase_3<name="Part Id MR2 Special Phase 3 (int)">;
        int Part_Id_LR_HR3_Normal<name="Part Id LR/HR3 Normal (int)">;
        int Part_Id_LR_HR3_Wounded<name="Part Id LR/HR3 Wounded (int)">;
        int Part_Id_LR_HR3_Special_Phase_1<name="Part Id LR/HR3 Special Phase 1 (int)">;
        int Part_Id_LR_HR3_Special_Phase_2<name="Part Id LR/HR3 Special Phase 2 (int)">;
        int Part_Id_LR_HR3_Special_Phase_3<name="Part Id LR/HR3 Special Phase 3 (int)">;
        int Part_Id_MR3_Normal<name="Part Id MR3 Normal (int)">;
        int Part_Id_MR3_Wounded<name="Part Id MR3 Wounded (int)">;
        int Part_Id_MR3_Special_Phase_1<name="Part Id MR3 Special Phase 1 (int)">;
        int Part_Id_MR3_Special_Phase_2<name="Part Id MR3 Special Phase 2 (int)">;
        int Part_Id_MR3_Special_Phase_3<name="Part Id MR3 Special Phase 3 (int)">;
        uint unk29<name="unk29 (uint)">;
        uint unk30<name="unk30 (uint)">;
        uint unk31<name="unk31 (uint)">;
        ubyte unk32<name="unk32 (ubyte)">;
        ubyte unk33<name="unk33 (ubyte)">;
    } Parts3;

    if (Parts_Type == 3) { Parts3 Parts3_<name="Parts3">; }
} Flinches;

Flinches Flinches_[Monster_Parts_.Flinches_Count]<optimize=false, name="Flinches">;

// Hitzone Header
typedef struct {
    uint Hitzone_Count<name="Hitzone Count (uint)">;
} Hitzone_Header;

Hitzone_Header Hitzone_Header_<name="Hitzone Header">;

// Hitzones
typedef struct {
    float Timer<name="Timer (float)">;
    uint Sever<name="Sever (uint)">;
    uint Impact<name="Impact (uint)">;
    uint Shot<name="Shot (uint)">;
    uint Fire<name="Fire (uint)">;
    uint Water<name="Water (uint)">;
    uint Ice<name="Ice (uint)">;
    uint Thunder<name="Thunder (uint)">;
    uint Dragon<name="Dragon (uint)">;
    uint Stun<name="Stun (uint)">;
    uint Stamina<name="Stamina (uint)">;
} Hitzones;

Hitzones Hitzones_[Hitzone_Header_.Hitzone_Count]<optimize=false, name="Hitzones">;

// Sever Header
typedef struct {
    uint Sever_Count<name="Sever Count (uint)">;
} Sever_Header;

Sever_Header Sever_Header_<name="Sever Header">;

// Severs
typedef struct {
    uint Damage<name="Damage (uint)">;
    uint unk1<name="unk1 (uint)">;
    uint unk2<name="unk2 (uint)">;
    uint Sever<name="Sever (uint)">;
    int unk5<name="unk5 (int)">;
    ubyte Special<name="Special (ubyte)">;
    ubyte Blunt<name="Blunt (ubyte)">;
    ubyte Shot<name="Shot (ubyte)">;
} Severs;

Severs Severs_[Sever_Header_.Sever_Count]<optimize=false, name="Severs">;

// Unk Header
typedef struct {
    uint Unk_Count<name="Unk Count (uint)">;
} Unk_Header;

Unk_Header Unk_Header_<name="Unk Header">;

// Unknowns
typedef struct {
    uint unk1<name="unk1 (uint)">;
    uint unk2<name="unk2 (uint)">;
    uint unk3<name="unk3 (uint)">;
    ubyte unk4<name="unk4 (ubyte)">;
    uint unk5<name="unk5 (uint)">;
    ubyte unk6<name="unk6 (ubyte)">;
    ubyte unk7<name="unk7 (ubyte)">;
    int unk8<name="unk8 (int)">;
    ubyte unk9<name="unk9 (ubyte)">;
    ubyte unk10<name="unk10 (ubyte)">;
    ubyte unk11<name="unk11 (ubyte)">;
} Unknowns;

Unknowns Unknowns_[Unk_Header_.Unk_Count]<optimize=false, name="Unknowns">;

// Unknown
uint unk1<name="unk1 (uint)">;
uint unk2<name="unk2 (uint)">;
